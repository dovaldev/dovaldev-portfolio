---
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import GoogleDocs from "@components/GoogleDocs.astro";
import ProjectCard from "@components/ProjectCard.astro";
import { projectsES } from "@data/projects.js";
const pages = await Astro.glob("../../content/es/*.mdx");
//console.log(pages);  // Verifica el contenido que se obtiene de los archivos MDX
---

<Layout title="Porfolio de Juan A. Doval con mis Proyectos | dovaldev">
  <GoogleDocs>
    <div
      id="pages"
      class="flex flex-1 flex-col gap-10 items-center overflow-y-scroll scrollbar-custom p-2 md:py-5"
    >
      {pages.map((item) => <item.Content />)}
    </div>
  </GoogleDocs>
</Layout>

<script>
  import { projectsES } from "@data/projects.js";

  document.addEventListener("DOMContentLoaded", () => {
    const links = document.querySelectorAll("a");
    let cardContainer: HTMLDivElement | null = null;

    const showCard = (
      project: {
        id?: number;
        name: string;
        description: string;
        image: string;
        url?: string;
        skills: string[];
      },
      linkRect: DOMRect
    ) => {
      if (!cardContainer) {
        cardContainer = document.createElement("div");
        cardContainer.classList.add(
          "fixed", // Cambiado de 'absolute' a 'fixed'
          "z-50",
          "project-card-hover",
          "overflow-hidden",
          "rounded-3xl"
        );

        cardContainer.innerHTML = `
        <div class="max-w-sm rounded overflow-hidden shadow-xl bg-white dark:bg-gray-800 transition duration-300 ease-in-out rounded-3xl">
          <div class="relative h-40">
            <img src="${project.image}" alt="Imagen del proyecto ${project.name}" class="absolute inset-0 w-full h-full object-cover transition-transform duration-300 ease-in-out hover:scale-105">
          </div>
          <div class="px-6 py-4">
            <h2 class="font-bold text-xl mb-2 text-gray-900 dark:text-gray-100">${project.name}</h2>
            <p class="text-gray-600 dark:text-gray-400 text-sm mb-4">${project.description}</p>
            <div class="flex flex-wrap gap-2 mb-4 text-sm">
              ${project.skills.map((skill) => `<span class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 text-xs font-semibold px-2.5 py-0.5 rounded">${skill}</span>`).join("")}
            </div>
            <div class="flex justify-center">
              <a href="${project.url}" target="_blank" rel="noopener noreferrer" class="bg-[#C2E7FF] !text-black hover:brightness-105 rounded-3xl block w-full text-white font-bold py-2 px-4 rounded text-center transition duration-300 ease-in-out">
                Ver proyecto
              </a>
            </div>
          </div>
        </div>
      `;

        document.body.appendChild(cardContainer);

        // Posicionar la tarjeta
        positionCard(cardContainer, linkRect);

        cardContainer.addEventListener("mouseleave", hideCard);
      }
    };

    const positionCard = (card: HTMLDivElement, linkRect: DOMRect) => {
      const cardRect = card.getBoundingClientRect();
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;

      let top = linkRect.bottom + window.scrollY;
      let left = linkRect.left + window.scrollX;

      // Ajustar posición vertical si la tarjeta se sale por abajo
      if (top + cardRect.height > viewportHeight + window.scrollY) {
        top = linkRect.top + window.scrollY - cardRect.height;
      }

      // Ajustar posición horizontal si la tarjeta se sale por la derecha
      if (left + cardRect.width > viewportWidth + window.scrollX) {
        left = viewportWidth + window.scrollX - cardRect.width;
      }

      card.style.top = `${top}px`;
      card.style.left = `${left}px`;
    };

    const hideCard = () => {
      if (cardContainer) {
        cardContainer.remove();
        cardContainer = null;
      }
    };

    links.forEach((link) => {
      link.addEventListener("mouseenter", (e) => {
        const target = e.target as HTMLAnchorElement;
        const project = projectsES.find(
          (project) => project.url === target.href
        );
        if (project) {
          const linkRect = link.getBoundingClientRect();
          showCard(project, linkRect);
        }
      });

      link.addEventListener("mouseleave", (e) => {
        setTimeout(() => {
          if (!cardContainer?.matches(":hover") && !link.matches(":hover")) {
            hideCard();
          }
        }, 100);
      });
    });

    // Reposicionar la tarjeta al hacer scroll o redimensionar la ventana
    window.addEventListener("scroll", () => {
      if (cardContainer) {
        const activeLink = document.querySelector("a:hover");
        if (activeLink) {
          positionCard(cardContainer, activeLink.getBoundingClientRect());
        }
      }
    });

    window.addEventListener("resize", () => {
      if (cardContainer) {
        const activeLink = document.querySelector("a:hover");
        if (activeLink) {
          positionCard(cardContainer, activeLink.getBoundingClientRect());
        }
      }
    });
  });
</script>
<style>
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
  }

  .project-link {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 0.5rem;
    text-decoration: none;
    color: inherit;
  }

  .project-card-hover {
    pointer-events: none;
  }
</style>
